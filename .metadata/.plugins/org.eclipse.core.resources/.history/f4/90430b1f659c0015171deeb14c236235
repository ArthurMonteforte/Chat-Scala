/*
 * Universidade Federal do ABC
 * 
 * Discentes:
 * Arthur Monteforte
 * Danielle Lazzer Lucarini
 * Laís Marinho de Souza
 * 
 * Disciplina: Paradigmas de Programação
 * 
 * 3º Quadrimestre 2015
 * 
 */

import java.io.BufferedInputStream
import java.io.PrintStream
import java.net.Socket
import java.io.InputStreamReader
import java.io.BufferedReader
import java.io.BufferedOutputStream
import java.net.ServerSocket
import collection.mutable


object Chat {
  // classe case para armazenar as informações dos usuários que irão se conectar com o servidor de bate-papo
  case class User(sock:Socket, is: BufferedReader, ps: PrintStream, name: String, language: String)
  
  def main(args: Array[String]): Unit = {
    val users = new mutable.ArrayBuffer[User]() with mutable.SynchronizedBuffer[User] {}
    val ss = new ServerSocket(10001)
    actors.Actor.actor {
      while(true){
        val sock = ss.accept()
        val is = new BufferedReader(new InputStreamReader(sock.getInputStream()))
        val os = new PrintStream((sock.getOutputStream()))
        actors.Actor.actor {
          os.println("What is your name?")
          val name = is.readLine()
          SaveUser.recebeInfo(name)
          os.println("Choose a language:")
          os.println("P - Portugues")
          os.println("E - English")
          val language = is.readLine()
          users += User(sock, is, os, name, language)
          if (language == "P") os.println("Digite uma mensagem:")
          else if (language == "E") os.println("Write a message:")
        }
      }
    }
    
    while(true){
      for(user <- users){
        if(user.is.ready){
          val input = user.is.readLine
          //chamar a funçao para traduzir:
          for(user2 <- users){
            user2.ps.println(user.name + " : " +  Translate.translate(user2.language, input))
          }
        }
      }
    }
  }
}
  
