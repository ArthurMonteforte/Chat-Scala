/*
 * Universidade Federal do ABC
 * 
 * Discentes:
 * Arthur Monteforte
 * Danielle Lazzer Lucarini
 * Laís Marinho de Souza
 * 
 * Disciplina: Paradigmas de Programação
 * 
 * 3º Quadrimestre 2015
 * 
 */

import java.io.BufferedInputStream
import java.io.PrintStream
import java.net.Socket
import java.io.InputStreamReader
import java.io.BufferedReader
import java.io.BufferedOutputStream
import java.net.ServerSocket
import collection.mutable

/*
 * Classe do servidor de bate-papo. É ela que abre um socket para aceitar conexões TCP/IP com os usuários.
 * Possui métodos para aceitar novos usuários, receber suas mensagens e repassá-las para os demais usuários.
 */
object Server {
  
  /* 
   * Classe case para armazenar as informações dos usuários que irão se conectar com o servidor de bate-papo
   * armazena o socket, variáveis para receber e enviar mensagens, nome do usuário e a linguagem escolhida
   */
  case class User(sock:Socket, in: BufferedReader, ps: PrintStream, name: String, language: String)
  
  /*Buffer sincronizado para armazenar os usuários. É necessário que ele seja sincronizado porque
     * ao mesmo tempo que estamos adicionando novos usuários no buffer, o servidor está iterando sobre
     * o buffer para repassar as mensagens, então o buffer sincronizado evita problemas de concorrência.
  */
  val users = new mutable.ArrayBuffer[User]() with mutable.SynchronizedBuffer[User] {}
  val serverSocket = new ServerSocket(10001)
  
  /* Método principal do servidor. Invoca os métodos de aceitação de usuários, recebimento e
  * repasse de mensagens para executarem continuamente.
  */
  def main(args: Array[String]): Unit = {

    acceptUsers()
    sendMessages()    
   
  }

  /*
   * Método para aceitar usuários. Fica rodando indefinidamente aceitando novos usuários, e
   * quando um usuário se conecta, cria um ator (parecido com uma thread) para esperar
   * o usuário digitar seu nome e escolher a linguagem. Caso não criássemos uma thread separada,
   * nenhum usuário poderia se conectar enquanto o usuário em questão não tivesse entrado com
   * os seus dados.
   */
  def acceptUsers() ={
    actors.Actor.actor {
      while(true){
        val socket = serverSocket.accept()
        val in = new BufferedReader(new InputStreamReader(socket.getInputStream()))
        val out = new PrintStream((socket.getOutputStream()))
        actors.Actor.actor {
          out.println("Bem-vindo ao Chat-Scala da UFABC!\n Por favor, digite o seu nome.")
          val name = in.readLine()
          SaveUser.recebeInfo(name)
          out.println("Escolha uma linguagem:")
          out.println("P - Portugues")
          out.println("E - English")
          val language = in.readLine()
          users += User(socket, in, out, name, language)
          if (language == "P") out.println("Digite uma mensagem:")
          else if (language == "E") out.println("Write a message:")
        }
      }
    }
  }
  
    /*
   * Método para repassar as mensagens para os usuários. Percorre a lista de usuários, e caso haja uma nova mensagem
   * de um usuário, repassa para os demais usuários, traduzindo a mensagem de acordo com a escolha do receptor.
   */
  def sendMessages() ={
     while(true){
      for(user <- users){
        if(user.in.ready){
          val input = user.in.readLine
          for(user2 <- users){
            user2.ps.println(user.name + " : " +  Translate.translate(user2.language, input))
          }
        }
      }
    }
  }
}
  
